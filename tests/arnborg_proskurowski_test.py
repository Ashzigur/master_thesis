'''
Created on Dec 28, 2015

@author: ivan
'''

from ivanov.graph.algorithms import arnborg_proskurowski
import networkx as nx
import unittest
from ivanov.graph.algorithms.arnborg_proskurowski.reducible_feature import ReducibleFeature
from ivanov.graph import nxext

class Test(unittest.TestCase):

    # Arnborg & Proskurowski example graph with tree-width 2
    graph_tw_2 = nx.MultiDiGraph()
    graph_tw_2.add_node(1, labels = ["(0)"])
    graph_tw_2.add_node(2, labels = ["(0)"])
    graph_tw_2.add_node(3, labels = ["(0)"])
    graph_tw_2.add_node(4, labels = ["(0)"])
    graph_tw_2.add_node(5, labels = ["(0)"])
    graph_tw_2.add_node(6, labels = ["(0)"])
    graph_tw_2.add_node(7, labels = ["(0)"])
    graph_tw_2.add_node(8, labels = ["(0)"])
    graph_tw_2.add_node(9, labels = ["(0)"])
    graph_tw_2.add_node(10, labels = ["(0)"])
    graph_tw_2.add_node(11, labels = ["(0)"])
    graph_tw_2.add_node(12, labels = ["(0)"])
    graph_tw_2.add_node(13, labels = ["(0)"])
    graph_tw_2.add_node(14, labels = ["(0)"])
    graph_tw_2.add_node(15, labels = ["(0)"])
    graph_tw_2.add_edge(1, 13, label = "0")
    graph_tw_2.add_edge(2, 13, label = "0")
    graph_tw_2.add_edge(2, 14, label = "0")
    graph_tw_2.add_edge(3, 14, label = "0")
    graph_tw_2.add_edge(4, 15, label = "0")
    graph_tw_2.add_edge(5, 6, label = "0")
    graph_tw_2.add_edge(5, 15, label = "0")
    graph_tw_2.add_edge(6, 5, label = "0")
    graph_tw_2.add_edge(6, 7, label = "0")
    graph_tw_2.add_edge(7, 6, label = "0")
    graph_tw_2.add_edge(7, 15, label = "0")
    graph_tw_2.add_edge(8, 12, label = "0")
    graph_tw_2.add_edge(9, 10, label = "0")
    graph_tw_2.add_edge(9, 12, label = "0")
    graph_tw_2.add_edge(10, 9, label = "0")
    graph_tw_2.add_edge(10, 11, label = "0")
    graph_tw_2.add_edge(11, 10, label = "0")
    graph_tw_2.add_edge(11, 12, label = "0")
    graph_tw_2.add_edge(12, 8, label = "0")
    graph_tw_2.add_edge(12, 9, label = "0")
    graph_tw_2.add_edge(12, 11, label = "0")
    graph_tw_2.add_edge(12, 13, label = "0")
    graph_tw_2.add_edge(12, 15, label = "0")
    graph_tw_2.add_edge(13, 1, label = "0")
    graph_tw_2.add_edge(13, 2, label = "0")
    graph_tw_2.add_edge(13, 12, label = "0")
    graph_tw_2.add_edge(13, 14, label = "0")
    graph_tw_2.add_edge(13, 15, label = "0")
    graph_tw_2.add_edge(14, 2, label = "0")
    graph_tw_2.add_edge(14, 3, label = "0")
    graph_tw_2.add_edge(14, 13, label = "0")
    graph_tw_2.add_edge(14, 15, label = "0")
    graph_tw_2.add_edge(15, 4, label = "0")
    graph_tw_2.add_edge(15, 5, label = "0")
    graph_tw_2.add_edge(15, 7, label = "0")
    graph_tw_2.add_edge(15, 12, label = "0")
    graph_tw_2.add_edge(15, 13, label = "0")
    graph_tw_2.add_edge(15, 14, label = "0")
    
    ring_graph = nx.MultiDiGraph()
    ring_graph.add_node(1, labels=["1"])
    ring_graph.add_node(2, labels=["2"])
    ring_graph.add_node(3, labels=["3"])
    ring_graph.add_node(4, labels=["4"])
    ring_graph.add_node(5, labels=["5"])
    ring_graph.add_edge(1, 2, label="a")
    ring_graph.add_edge(2, 3, label="b")
    ring_graph.add_edge(3, 4, label="c")
    ring_graph.add_edge(4, 5, label="d")
    ring_graph.add_edge(5, 1, label="e")
    
    graph_tw_3 = nx.MultiDiGraph()
    # base structure
#     graph_tw_3.add_node(, labels=[""])
    # rule 4.1
    graph_tw_3.add_node(1, labels=["1 (4.1)"])
    graph_tw_3.add_node(2, labels=["2 (4.1)"])
    graph_tw_3.add_node(3, labels=["3 (4.1)"])
    graph_tw_3.add_node(4, labels=["4 (4.1)"])
    graph_tw_3.add_edge(1, 2, label="0")
    graph_tw_3.add_edge(1, 3, label="0")
    graph_tw_3.add_edge(1, 4, label="0")
    graph_tw_3.add_edge(2, 3, label="0")
    # rule 4.2
    graph_tw_3.add_node(5, labels=["1 (4.2)"])
    graph_tw_3.add_node(6, labels=["2 (4.2)"])
    graph_tw_3.add_node(7, labels=["3 (4.2)"])
    graph_tw_3.add_node(8, labels=["4 (4.2)"])
    graph_tw_3.add_node(9, labels=["5 (4.2)"])
    graph_tw_3.add_edge(5, 7, label="0")
    graph_tw_3.add_edge(5, 8, label="0")
    graph_tw_3.add_edge(5, 9, label="0")
    graph_tw_3.add_edge(6, 7, label="0")
    graph_tw_3.add_edge(6, 8, label="0")
    graph_tw_3.add_edge(6, 9, label="0")
    # rule 4.3
    graph_tw_3.add_node(10, labels=["0 (4.3)"])
    graph_tw_3.add_node(11, labels=["1 (4.3)"])
    graph_tw_3.add_node(12, labels=["2 (4.3)"])
    graph_tw_3.add_node(13, labels=["3 (4.3)"])
    graph_tw_3.add_node(14, labels=["4 (4.3)"])
    graph_tw_3.add_node(15, labels=["5 (4.3)"])
    graph_tw_3.add_node(16, labels=["6 (4.3)"])
    graph_tw_3.add_edge(10, 11, label="0")
    graph_tw_3.add_edge(10, 12, label="0")
    graph_tw_3.add_edge(10, 13, label="0")
    graph_tw_3.add_edge(11, 14, label="0")
    graph_tw_3.add_edge(11, 16, label="0")
    graph_tw_3.add_edge(12, 14, label="0")
    graph_tw_3.add_edge(12, 15, label="0")
    graph_tw_3.add_edge(13, 15, label="0")
    graph_tw_3.add_edge(13, 16, label="0")
    # rule 5.1.1
    graph_tw_3.add_node(17, labels=[" (5.1.1)"])
    graph_tw_3.add_node(18, labels=[" (5.1.1)"])
    graph_tw_3.add_node(19, labels=[" (5.1.1)"])
    graph_tw_3.add_node(20, labels=[" (5.1.1)"])
    graph_tw_3.add_edge(17, 18, label="0")
    graph_tw_3.add_edge(17, 19, label="0")
    graph_tw_3.add_edge(17, 20, label="0")
    graph_tw_3.add_edge(18, 19, label="0")
    graph_tw_3.add_edge(18, 20, label="0")
    graph_tw_3.add_edge(19, 20, label="0")
    # rule 5.1.2
    graph_tw_3.add_node(21, labels=[" (5.1.2)"])
    graph_tw_3.add_node(22, labels=[" (5.1.2)"])
    graph_tw_3.add_node(23, labels=[" (5.1.2)"])
    graph_tw_3.add_node(24, labels=[" (5.1.2)"])
    graph_tw_3.add_edge(21, 22, label="0")
    graph_tw_3.add_edge(21, 23, label="0")
    graph_tw_3.add_edge(21, 24, label="0")
    graph_tw_3.add_edge(22, 23, label="0")
    graph_tw_3.add_edge(22, 24, label="0")
    # rule 5.2.1 - 1
    graph_tw_3.add_node(31, labels=["1 (5.2.1 - 1)"])
    graph_tw_3.add_node(32, labels=["2 (5.2.1 - 1)"])
    graph_tw_3.add_node(33, labels=["3 (5.2.1 - 1)"])
    graph_tw_3.add_node(34, labels=["4 (5.2.1 - 1)"])
    graph_tw_3.add_node(35, labels=["5 (5.2.1 - 1)"])
    graph_tw_3.add_edge(31, 32, label="0")
    graph_tw_3.add_edge(31, 33, label="0")
    graph_tw_3.add_edge(31, 34, label="0")
    graph_tw_3.add_edge(32, 33, label="0")
    graph_tw_3.add_edge(32, 35, label="0")
    # rule 5.2.1 - 2
    graph_tw_3.add_node(41, labels=["1 (5.2.1 - 2)"])
    graph_tw_3.add_node(42, labels=["2 (5.2.1 - 2)"])
    graph_tw_3.add_node(43, labels=["3 (5.2.1 - 2)"])
    graph_tw_3.add_node(44, labels=["4 (5.2.1 - 2)"])
    graph_tw_3.add_node(45, labels=["5 (5.2.1 - 2)"])
    graph_tw_3.add_node(46, labels=["6 (5.2.1 - 2)"])
    graph_tw_3.add_edge(41, 42, label="0")
    graph_tw_3.add_edge(41, 43, label="0")
    graph_tw_3.add_edge(41, 44, label="0")
    graph_tw_3.add_edge(42, 45, label="0")
    graph_tw_3.add_edge(42, 46, label="0")
    graph_tw_3.add_edge(43, 44, label="0")
    graph_tw_3.add_edge(45, 46, label="0")
    # rule 5.2.2
    graph_tw_3.add_node(51, labels=["1 (5.2.2)"])
    graph_tw_3.add_node(52, labels=["2 (5.2.2)"])
    graph_tw_3.add_node(53, labels=["3 (5.2.2)"])
    graph_tw_3.add_node(54, labels=["4 (5.2.2)"])
    graph_tw_3.add_node(55, labels=["5 (5.2.2)"])
    graph_tw_3.add_edge(51, 52, label="0")
    graph_tw_3.add_edge(51, 53, label="0")
    graph_tw_3.add_edge(51, 54, label="0")
    graph_tw_3.add_edge(52, 53, label="0")
    graph_tw_3.add_edge(52, 55, label="0")
    graph_tw_3.add_edge(54, 53, label="0")
    graph_tw_3.add_edge(55, 53, label="0")
    # rule 5.2.3.1
    graph_tw_3.add_node(60, labels=["0 (5.2.3.1)"])
    graph_tw_3.add_node(61, labels=["1 (5.2.3.1)"])
    graph_tw_3.add_node(62, labels=["2 (5.2.3.1)"])
    graph_tw_3.add_node(63, labels=["3 (5.2.3.1)"])
    graph_tw_3.add_node(64, labels=["4 (5.2.3.1)"])
    graph_tw_3.add_node(65, labels=["5 (5.2.3.1)"])
    graph_tw_3.add_edge(60, 61, label="0")
    graph_tw_3.add_edge(60, 62, label="0")
    graph_tw_3.add_edge(60, 63, label="0")
    graph_tw_3.add_edge(60, 64, label="0")
    graph_tw_3.add_edge(60, 65, label="0")
    graph_tw_3.add_edge(61, 62, label="0")
    graph_tw_3.add_edge(62, 63, label="0")
    graph_tw_3.add_edge(63, 64, label="0")
    graph_tw_3.add_edge(64, 65, label="0")
    graph_tw_3.add_edge(65, 61, label="0")
#     # rule 5.2.3.2 # TODO: not sure what is this configuration
#     graph_tw_3.add_node(, labels=[" (5.2.3.2)"])
#     graph_tw_3.add_edge(, , label="0")
    # rule 5.2.3.3 - 1
    graph_tw_3.add_node(81, labels=["1 (5.2.3.3) - 1"])
    graph_tw_3.add_node(82, labels=["2 (5.2.3.3) - 1"])
    graph_tw_3.add_node(83, labels=["3 (5.2.3.3) - 1"])
    graph_tw_3.add_node(84, labels=["4 (5.2.3.3) - 1"])
    graph_tw_3.add_node(85, labels=["5 (5.2.3.3) - 1"])
    graph_tw_3.add_node(86, labels=["6 (5.2.3.3) - 1"])
    graph_tw_3.add_edge(81, 82, label="0")
    graph_tw_3.add_edge(81, 83, label="0")
    graph_tw_3.add_edge(81, 85, label="0")
    graph_tw_3.add_edge(82, 84, label="0")
    graph_tw_3.add_edge(82, 86, label="0")
    graph_tw_3.add_edge(83, 84, label="0")
    graph_tw_3.add_edge(83, 85, label="0")
    graph_tw_3.add_edge(84, 86, label="0")
    # rule 5.2.3.3 - 2
    graph_tw_3.add_node(91, labels=["1 (5.2.3.3) - 2"])
    graph_tw_3.add_node(92, labels=["2 (5.2.3.3) - 2"])
    graph_tw_3.add_node(93, labels=["3 (5.2.3.3) - 2"])
    graph_tw_3.add_node(94, labels=["4 (5.2.3.3) - 2"])
    graph_tw_3.add_node(95, labels=["5 (5.2.3.3) - 2"])
    graph_tw_3.add_edge(91, 92, label="0")
    graph_tw_3.add_edge(91, 93, label="0")
    graph_tw_3.add_edge(91, 95, label="0")
    graph_tw_3.add_edge(92, 94, label="0")
    graph_tw_3.add_edge(92, 95, label="0")
    graph_tw_3.add_edge(93, 94, label="0")
    graph_tw_3.add_edge(93, 95, label="0")
    graph_tw_3.add_edge(94, 95, label="0")
    # rule 5.2.4 - 1
    graph_tw_3.add_node(101, labels=["1 (5.2.4 - 1)"])
    graph_tw_3.add_node(102, labels=["2 (5.2.4 - 1)"])
    graph_tw_3.add_node(103, labels=["3 (5.2.4 - 1)"])
    graph_tw_3.add_node(104, labels=["4 (5.2.4 - 1)"])
    graph_tw_3.add_node(105, labels=["5 (5.2.4 - 1)"])
    graph_tw_3.add_node(106, labels=["6 (5.2.4 - 1)"])
    graph_tw_3.add_node(107, labels=["7 (5.2.4 - 1)"])
    graph_tw_3.add_node(108, labels=["8 (5.2.4 - 1)"])
    graph_tw_3.add_node(109, labels=["9 (5.2.4 - 1)"])
    graph_tw_3.add_node(110, labels=["10 (5.2.4 - 1)"])
    graph_tw_3.add_node(111, labels=["11 (5.2.4 - 1)"])
    graph_tw_3.add_node(112, labels=["12 (5.2.4 - 1)"])
    graph_tw_3.add_edge(101, 102, label = "0")
    graph_tw_3.add_edge(101, 105, label = "0")
    graph_tw_3.add_edge(101, 106, label = "0")
    graph_tw_3.add_edge(102, 103, label = "0")
    graph_tw_3.add_edge(102, 104, label = "0")
    graph_tw_3.add_edge(103, 104, label = "0")
    graph_tw_3.add_edge(105, 106, label = "0")
    graph_tw_3.add_edge(105, 107, label = "0")
    graph_tw_3.add_edge(106, 111, label = "0")
    graph_tw_3.add_edge(107, 108, label = "0")
    graph_tw_3.add_edge(107, 109, label = "0")
    graph_tw_3.add_edge(108, 109, label = "0")
    graph_tw_3.add_edge(109, 110, label = "0")
    graph_tw_3.add_edge(110, 111, label = "0")
    graph_tw_3.add_edge(110, 112, label = "0")
    graph_tw_3.add_edge(111, 112, label = "0")
#     graph_tw_3.add_edge(103, 151, label = "0")
#     graph_tw_3.add_edge(104, 52, label = "0")
#     graph_tw_3.add_edge(108, 53, label = "0")
#     graph_tw_3.add_edge(112, 54, label = "0")
    # rule 5.2.4 - 2
    graph_tw_3.add_node(121, labels=["1 (5.2.4 - 2)"])
    graph_tw_3.add_node(122, labels=["2 (5.2.4 - 2)"])
    graph_tw_3.add_node(123, labels=["3 (5.2.4 - 2)"])
    graph_tw_3.add_node(124, labels=["4 (5.2.4 - 2)"])
    graph_tw_3.add_node(125, labels=["5 (5.2.4 - 2)"])
    graph_tw_3.add_node(126, labels=["6 (5.2.4 - 2)"])
    graph_tw_3.add_node(127, labels=["7 (5.2.4 - 2)"])
    graph_tw_3.add_node(128, labels=["8 (5.2.4 - 2)"])
    graph_tw_3.add_node(129, labels=["9 (5.2.4 - 2)"])
    graph_tw_3.add_node(130, labels=["10 (5.2.4 - 2)"])
    graph_tw_3.add_edge(121, 122, label = "0")
    graph_tw_3.add_edge(121, 123, label = "0")
    graph_tw_3.add_edge(122, 123, label = "0")
    graph_tw_3.add_edge(123, 124, label = "0")
    graph_tw_3.add_edge(124, 125, label = "0")
    graph_tw_3.add_edge(125, 126, label = "0")
    graph_tw_3.add_edge(126, 127, label = "0")
    graph_tw_3.add_edge(127, 128, label = "0")
    graph_tw_3.add_edge(128, 129, label = "0")
    graph_tw_3.add_edge(128, 130, label = "0")
    graph_tw_3.add_edge(129, 130, label = "0")
#     graph_tw_3.add_edge(121, 51, label = "0")
#     graph_tw_3.add_edge(122, 52, label = "0")
#     graph_tw_3.add_edge(124, 53, label = "0")
#     graph_tw_3.add_edge(125, 53, label = "0")
#     graph_tw_3.add_edge(126, 53, label = "0")
#     graph_tw_3.add_edge(127, 53, label = "0")
#     graph_tw_3.add_edge(129, 54, label = "0")
#     graph_tw_3.add_edge(130, 55, label = "0")
    # rule 5.2.5
    graph_tw_3.add_node(131, labels=["1 (5.2.5)"])
    graph_tw_3.add_node(132, labels=["2 (5.2.5)"])
    graph_tw_3.add_node(133, labels=["3 (5.2.5)"])
    graph_tw_3.add_node(134, labels=["4 (5.2.5)"])
    graph_tw_3.add_node(135, labels=["5 (5.2.5)"])
    graph_tw_3.add_node(136, labels=["6 (5.2.5)"])
    graph_tw_3.add_edge(131, 132, label="0")
    graph_tw_3.add_edge(131, 133, label="0")
    graph_tw_3.add_edge(131, 134, label="0")
    graph_tw_3.add_edge(132, 133, label="0")
    graph_tw_3.add_edge(132, 135, label="0")
    graph_tw_3.add_edge(133, 136, label="0")
    graph_tw_3.add_edge(134, 135, label="0")
    graph_tw_3.add_edge(134, 136, label="0")
    graph_tw_3.add_edge(135, 136, label="0")
    # rule 6.1
    graph_tw_3.add_node(141, labels=["1 (6.1)"])
    graph_tw_3.add_node(142, labels=["2 (6.1)"])
    graph_tw_3.add_node(143, labels=["3 (6.1)"])
    graph_tw_3.add_node(144, labels=["4 (6.1)"])
    graph_tw_3.add_node(145, labels=["5 (6.1)"])
    graph_tw_3.add_node(146, labels=["6 (6.1)"])
    graph_tw_3.add_edge(141, 142, label="0")
    graph_tw_3.add_edge(141, 144, label="0")
    graph_tw_3.add_edge(141, 146, label="0")
    graph_tw_3.add_edge(142, 143, label="0")
    graph_tw_3.add_edge(142, 145, label="0")
    graph_tw_3.add_edge(143, 144, label="0")
    graph_tw_3.add_edge(143, 146, label="0")
    graph_tw_3.add_edge(144, 145, label="0")
    graph_tw_3.add_edge(145, 146, label="0")
    # rule 6.2
    graph_tw_3.add_node(151, labels=["1 (6.2)"])
    graph_tw_3.add_node(152, labels=["2 (6.2)"])
    graph_tw_3.add_node(153, labels=["3 (6.2)"])
    graph_tw_3.add_node(154, labels=["4 (6.2)"])
    graph_tw_3.add_node(155, labels=["5 (6.2)"])
    graph_tw_3.add_node(156, labels=["6 (6.2)"])
    graph_tw_3.add_edge(151, 152, label="0")
    graph_tw_3.add_edge(151, 154, label="0")
    graph_tw_3.add_edge(151, 156, label="0")
    graph_tw_3.add_edge(152, 153, label="0")
    graph_tw_3.add_edge(152, 155, label="0")
    graph_tw_3.add_edge(153, 154, label="0")
    graph_tw_3.add_edge(154, 155, label="0")
    graph_tw_3.add_edge(155, 156, label="0")
    # rule 7.1
    graph_tw_3.add_node(161, labels=["1 (7.1)"])
    graph_tw_3.add_node(162, labels=["2 (7.1)"])
    graph_tw_3.add_node(163, labels=["3 (7.1)"])
    graph_tw_3.add_node(164, labels=["4 (7.1)"])
    graph_tw_3.add_node(165, labels=["5 (7.1)"])
    graph_tw_3.add_node(166, labels=["6 (7.1)"])
    graph_tw_3.add_node(167, labels=["7 (7.1)"])
    graph_tw_3.add_node(168, labels=["8 (7.1)"])
    graph_tw_3.add_edge(161, 162, label="0")
    graph_tw_3.add_edge(161, 163, label="0")
    graph_tw_3.add_edge(161, 165, label="0")
    graph_tw_3.add_edge(162, 164, label="0")
    graph_tw_3.add_edge(162, 166, label="0")
    graph_tw_3.add_edge(163, 164, label="0")
    graph_tw_3.add_edge(163, 167, label="0")
    graph_tw_3.add_edge(164, 168, label="0")
    graph_tw_3.add_edge(165, 166, label="0")
    graph_tw_3.add_edge(165, 167, label="0")
    graph_tw_3.add_edge(166, 168, label="0")
    graph_tw_3.add_edge(167, 168, label="0")
    # rule 7.2
    graph_tw_3.add_node(171, labels=["1 (7.2)"])
    graph_tw_3.add_node(172, labels=["2 (7.2)"])
    graph_tw_3.add_node(173, labels=["3 (7.2)"])
    graph_tw_3.add_node(174, labels=["4 (7.2)"])
    graph_tw_3.add_node(175, labels=["5 (7.2)"])
    graph_tw_3.add_node(176, labels=["6 (7.2)"])
    graph_tw_3.add_node(177, labels=["7 (7.2)"])
    graph_tw_3.add_node(178, labels=["8 (7.2)"])
    graph_tw_3.add_edge(171, 172, label="0")
    graph_tw_3.add_edge(171, 173, label="0")
    graph_tw_3.add_edge(171, 175, label="0")
    graph_tw_3.add_edge(172, 174, label="0")
    graph_tw_3.add_edge(172, 176, label="0")
    graph_tw_3.add_edge(173, 174, label="0")
    graph_tw_3.add_edge(173, 177, label="0")
    graph_tw_3.add_edge(175, 176, label="0")
    graph_tw_3.add_edge(175, 177, label="0")
    graph_tw_3.add_edge(176, 178, label="0")
    graph_tw_3.add_edge(177, 178, label="0")
    
    def common_asserts(self, tw, tw_exp, canon_str, canon_str_exp, features, features_exp):
        self.assertEqual(tw, tw_exp, "The tree-width was not estimated correctly.")
        self.assertEqual(canon_str, canon_str_exp, "The canonical string was not extracted correctly.")
        self.assertEqual(features, features_exp, "The features were not extracted correctly.")

    def testTW_2(self):
        features_exp = [
            ReducibleFeature(1, 2, ["n_4"], ["n_15"]),
            ReducibleFeature(1, 2, ["n_8"], ["n_12"]),
            ReducibleFeature(1, 2, ["n_1"], ["n_13"]),
            ReducibleFeature(1, 2, ["n_3"], ["n_14"]),
            ReducibleFeature(2, 1, ["n_9", "n_10", "n_11"], ["n_12", "n_12"]),
            ReducibleFeature(2, 1, ["n_5", "n_6", "n_7"], ["n_15", "n_15"]),
            ReducibleFeature(2, 1, ["n_2"], ["n_14", "n_13"]),
            ReducibleFeature(2, 1, ["n_14"], ["n_15", "n_13"]),
            ReducibleFeature(2, 1, ["n_12"], ["n_15", "n_13"]),
            ReducibleFeature(1, 1, ["n_15"], ["n_13"])
        ]
        canon_str_exp = "(1.1;(0.1;(0),(1.2;(0,((0,1),(1,0))),(0))),((0.2;((2.1;((0.2;((2.1;(0,((0,1),(1,0))),(0),(0,((0,1),(1,0)))),((0,1),(1,0))),(0,((0,1),(1,0)))),((0,1),(1,0))),(0.1;(0),(1.2;(0,((0,1),(1,0))),(0))),(0,((0,1),(1,0)))),((0,1))),((2.1;(0,((0,1),(1,0))),(0.1;(0.1;(0),(1.2;(0,((0,1),(1,0))),(0))),(2.1;(0,((0,1),(1,0))),(0),(0,((0,1),(1,0))),(0),(0,((0,1),(1,0))),(0),(0,((0,1),(1,0))))),(0,((0,1),(1,0)))),((0,1),(1,0))),(0,((0,1),(1,0)))),((0,1))),(0.1;(0.1;(0),(1.2;(0,((0,1),(1,0))),(0))),(2.1;(0,((0,1),(1,0))),(0),(0,((0,1),(1,0))),(0),(0,((0,1),(1,0))),(0),(0,((0,1),(1,0))))))"
        tw, canon_str, features = arnborg_proskurowski.get_canonical_representation(self.graph_tw_2, return_features=True)
        self.common_asserts(tw, 2, canon_str, canon_str_exp, features, features_exp)
    
    def testTW_2_ring(self):
        features_exp = [
            ReducibleFeature(2, 2, ["n_1"], ["n_2", "n_3", "n_4", "n_5"]),
        ]
        canon_str_exp = "(2.2;1,(a,((0,1))),2,(b,((0,1))),3,(c,((0,1))),4,(d,((0,1))),5,(e,((0,1))))"
        tw, canon_str, features = arnborg_proskurowski.get_canonical_representation(self.ring_graph, return_features=True)
        self.common_asserts(tw, 2, canon_str, canon_str_exp, features, features_exp)
    
    def testTW_3(self):
        nxext.visualize_graph(self.graph_tw_3) 

if __name__ == "__main__":
    #import sys;sys.argv = ['', 'Test.testName']
    unittest.main()